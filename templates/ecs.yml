AWSTemplateFormatVersion: '2010-09-09'
Description: "ESC cluster"


Parameters:

  vpcId:
    Type: String
    Description: "VPC ID"

  ecsClusterName:
    Type: String
    Description: "Name of the ECS Cluster"

  ecsExecutionRoleArn:
    Type: String
    Description: "ARN of ECS execution role"

  ecsServiceRoleArn:
    Type: String
    Description: "ARN of ECS execution role"

  containerVersion:
    Type: String
    Description: "Version of a docker container in ECR repository"

  applicationSecurityGroup:
    Type: String
    Description: "Application security group"

  publicSubnetA:
    Type: String
    Description: "Public subnet in AZ a"

  publicSubnetB:
    Type: String
    Description: "Public subnet in AZ b"

  albSecurityGroup:
    Type: String
    Description: "ALB security group"

  autoScalingRoleArn:
    Type: String
    Description: "ARN of autoscaling role"

  RdsMysqlEndpointAddress:
    Type: String
    Description: "Mysql endpoint"

  RdsMysqlEndpointPort:
    Type: String
    Description: "Mysql port"

  secretsManagerId:
    Type: String
    Description: "Resource id of Secrets manager secret"

  databaseName:
    Type: String
    Description: "Rds mysql database name"


Resources:

  #
  # ECS
  #

  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      CapacityProviders:
        - FARGATE
      ClusterName: !Ref ecsClusterName

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      RequiresCompatibilities:
        - FARGATE
      Cpu: 1024
      Memory: 2048
      NetworkMode: awsvpc
      ExecutionRoleArn: !Ref ecsExecutionRoleArn
      TaskRoleArn: !Ref ecsExecutionRoleArn
      ContainerDefinitions:
        - Name: "demo-app"
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/ecs-demo:${containerVersion}"
          PortMappings:
            - ContainerPort: 80
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CwLogsGroup
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: demo-app
          Environment:
            - Name: MYSQL_HOST
              Value: !Sub "${RdsMysqlEndpointAddress}:${RdsMysqlEndpointPort}"
            - Name: MYSQL_USERNAME
              Value: !Sub "\{{resolve:secretsmanager:${secretsManagerId}:SecretString:username}}"
            - Name: MYSQL_PASSWORD
              Value: !Sub "\{{resolve:secretsmanager:${secretsManagerId}:SecretString:password}}"
            - Name: MYSQL_DATABASE
              Value: !Ref databaseName

  CwLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "${AWS::StackName}-logs"
      RetentionInDays: 14

  EcsService:
    Type: AWS::ECS::Service
    DependsOn: Listener
    Properties:
      Cluster: !Ref EcsCluster
      DesiredCount: 2
      TaskDefinition: !Ref TaskDefinition
      CapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 100
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      LoadBalancers:
        - ContainerName: "demo-app"
          ContainerPort: 80
          TargetGroupArn: !Ref TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref applicationSecurityGroup
          Subnets:
            - !Ref publicSubnetA
            - !Ref publicSubnetB

  #
  # ALB
  #

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: 5
      Subnets:
        - !Ref publicSubnetA
        - !Ref publicSubnetB
      SecurityGroups:
        - !Ref albSecurityGroup

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: LoadBalancer
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: "demo-ecs-target-group"
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref vpcId
      TargetType: ip

  AutoscalingScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: 2
      MaxCapacity: 6
      ResourceId: !Join [ '/', [ service, !Ref EcsCluster, !GetAtt EcsService.Name ] ]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !Ref autoScalingRoleArn

  AutoscalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub "${AWS::StackName}-scaling-policy"
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoscalingScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 10
        ScaleOutCooldown: 10
        TargetValue: 50

Outputs:

  ecsClusterId:
    Value: !Ref EcsCluster

  ecsServiceName:
    Value: !GetAtt EcsService.Name

  AlbDnsName:
    Description: The DNS name of the load balancer
    Value: !GetAtt LoadBalancer.DNSName
